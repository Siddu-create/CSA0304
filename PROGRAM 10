#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 5 // Define the maximum size of the stack

int stack[MAX_SIZE]; // Array to store stack elements
int top = -1;        // Variable to keep track of the top element, -1 indicates empty stack

// Function to check if the stack is empty
int isEmpty() {
    return top == -1;
}

// Function to check if the stack is full
int isFull() {
    return top == MAX_SIZE - 1;
}

// Function to push an element onto the stack
void push(int data) {
    if (isFull()) {
        printf("Stack Overflow: Cannot push element %d, stack is full.\n", data);
    } else {
        stack[++top] = data;
        printf("Pushed %d onto the stack.\n", data);
    }
}

// Function to pop an element from the stack
int pop() {
    if (isEmpty()) {
        printf("Stack Underflow: Cannot pop, stack is empty.\n");
        return -1; // Return a sentinel value for error
    } else {
        int popped_data = stack[top--];
        printf("Popped %d from the stack.\n", popped_data);
        return popped_data;
    }
}

// Function to peek at the top element of the stack without removing it
int peek() {
    if (isEmpty()) {
        printf("Stack is empty: No element to peek.\n");
        return -1; // Return a sentinel value for error
    } else {
        printf("Top element is %d.\n", stack[top]);
        return stack[top];
    }
}

// Function to display the elements of the stack
void display() {
    if (isEmpty()) {
        printf("Stack is empty.\n");
    } else {
        printf("Stack elements: ");
        for (int i = 0; i <= top; i++) {
            printf("%d ", stack[i]);
        }
        printf("\n");
    }
}

int main() {
    push(10);
    push(20);
    push(30);
    display();
    peek();
    pop();
    display();
    push(40);
    push(50);
    push(60); // This will cause a stack overflow
    display();
    pop();
    pop();
    pop();
    pop(); // This will cause a stack underflow
    peek(); // This will show stack empty
    display();

    return 0;
}
