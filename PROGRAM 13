#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 5 // Define the maximum size of the queue

int queue[MAX_SIZE];
int front = -1;
int rear = -1;

// Function to check if the queue is empty
int isEmpty() {
    return (front == -1 || front > rear);
}

// Function to check if the queue is full
int isFull() {
    return (rear == MAX_SIZE - 1);
}

// Function to add an element to the queue (ENQUEUE)
void enqueue(int data) {
    if (isFull()) {
        printf("Queue is Full! Cannot enqueue %d.\n", data);
        return;
    }
    if (isEmpty()) {
        front = 0; // Initialize front when the first element is added
    }
    rear++;
    queue[rear] = data;
    printf("Enqueued: %d\n", data);
}

// Function to remove an element from the queue (DEQUEUE)
int dequeue() {
    if (isEmpty()) {
        printf("Queue is Empty! Cannot dequeue.\n");
        return -1; // Return a sentinel value to indicate an empty queue
    }
    int data = queue[front];
    front++;
    if (front > rear) { // Reset front and rear if the queue becomes empty after dequeue
        front = -1;
        rear = -1;
    }
    printf("Dequeued: %d\n", data);
    return data;
}

// Function to display the elements of the queue
void display() {
    if (isEmpty()) {
        printf("Queue is Empty!\n");
        return;
    }
    printf("Queue elements: ");
    for (int i = front; i <= rear; i++) {
        printf("%d ", queue[i]);
    }
    printf("\n");
}

int main() {
    int choice, data;

    while (1) {
        printf("\n--- Queue Operations ---\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to enqueue: ");
                scanf("%d", &data);
                enqueue(data);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
