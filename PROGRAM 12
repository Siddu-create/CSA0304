#include <stdio.h>
#include <stdlib.h>
#include <ctype.h> // For isdigit()

// Define the maximum capacity of the stack
#define MAX_SIZE 100

// Define a structure for the stack
typedef struct {
    int arr[MAX_SIZE];
    int top;
} Stack;

// Function to initialize the stack
void initialize(Stack *stack) {
    stack->top = -1;
}

// Function to check if the stack is empty
int isEmpty(Stack *stack) {
    return stack->top == -1;
}

// Function to check if the stack is full
int isFull(Stack *stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to push an element onto the stack
void push(Stack *stack, int value) {
    if (isFull(stack)) {
        printf("Stack Overflow\n");
        return;
    }
    stack->arr[++stack->top] = value;
}

// Function to pop an element from the stack
int pop(Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow\n");
        return -1; // Indicate an error
    }
    return stack->arr[stack->top--];
}

// Function to evaluate a postfix expression
int evaluatePostfix(char* expression) {
    Stack stack;
    initialize(&stack);
    int i;

    for (i = 0; expression[i] != '\0'; i++) {
        if (isdigit(expression[i])) {
            push(&stack, expression[i] - '0'); // Convert char to int
        } else {
            int operand2 = pop(&stack);
            int operand1 = pop(&stack);
            int result;

            switch (expression[i]) {
                case '+':
                    result = operand1 + operand2;
                    break;
                case '-':
                    result = operand1 - operand2;
                    break;
                case '*':
                    result = operand1 * operand2;
                    break;
                case '/':
                    result = operand1 / operand2;
                    break;
                default:
                    printf("Invalid operator: %c\n", expression[i]);
                    exit(1);
            }
            push(&stack, result);
        }
    }
    return pop(&stack);
}

int main() {
    char postfixExpr[] = "23*5+"; // Represents (2 * 3) + 5
    int result = evaluatePostfix(postfixExpr);
    printf("Result of postfix expression \"%s\": %d\n", postfixExpr, result);

    char anotherPostfixExpr[] = "724*+"; // Represents 7 + (2 * 4)
    result = evaluatePostfix(anotherPostfixExpr);
    printf("Result of postfix expression \"%s\": %d\n", anotherPostfixExpr, result);

    return 0;
}
